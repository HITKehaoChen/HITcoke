EventProxy工具学习（只留下了我需要的部分）

Features

- 事件机制解耦复杂业务逻辑
- 解决callback hell的问题
- 串行等待=>并行等待
- Error handling 友好
- 适合前后端 nodejs 浏览器
- 兼容CMD，AMD以及CommonJS模块坏境

代码样例：

	

    var ep = EventProxy.create("template", "data", "l10n", function (template, data, l10n) {
      _.template(template, data, l10n);
    });
    
    $.get("template", function (template) {
      // something
      ep.emit("template", template);
    });
    $.get("data", function (data) {
      // something
      ep.emit("data", data);
    });
    $.get("l10n", function (l10n) {
      // something
      ep.emit("l10n", l10n);
    });

异步协作

多类型异步协作

此处以页面渲染为场景，渲染页面需要模板、数据。假设都需要异步读取。

    var fs = require('fs');
    var ep = new EventProxy();
    ep.all('tpl','data',function(tpl,data){
        //所有指定事件触发后 将会被调用执行
        //参数对应各自的事件名
    });
    fs.readFile('template.tpl','utf-8',function(err,content){
        ep.emit('tpl',content);
    });
    db.get('some sql',function(err,result){
        ep.emit('data',result);
    });

all方法将handler注册到事件组合上。当注册的多个事件都触发后，将会调用handler执行，每个事件传递的数据，将会依照事件名顺序，传入handler作为参数。

快速创建

EventProxy提供了create静态方法，可以快速完成注册all事件。

    var ep = EventProxy.create('tpl','data',function(tpl,data){
       //TODO 
    });

以上方法等效于

    var ep = new EventProxy();
    ep.all('tpl','data',function(tpl,data){
        //TODO
    })

重复异步协作

此处以读取目录下的所有文件为例，在异步操作中，我们需要在所有异步调用结束后，执行某些操作。

    var ep = new EventProxy();
    ep.after('got_file',files.length,function(list){
        //所有文件异步执行后将被执行
        //所有文件的内容都会存在list数组中
    });
    for(var i = 0; i<files.length;i++){
        fs.readFile(files[i],'utf-8',function(err,content){
    		ep.emit('got_file',content);
        });
    }

持续型异步协作

此处以股票为例，数据和模板都是异步获取，但是数据会持续刷新，视图会需要重新刷新。

    var ep = new EventProxy();
    ep.tail('tpl','data',function(tpl,data){
        //所有指定事件触发后，调用执行
        //参数对应各自事件名的最新数据
    });
    fs.readFile('template.tpl','utf-8',function(err,content){
        ep.emit('tpl',content);
    });
    setInterval(function(){
        db.get('some sql',function(err,result){
            ep.emit('data',result);
        });
    },2000);

tail与all方法比较类似，都是注册到事件组合上。不同在于，指定事件都触发之后，如果事件依旧持续触发，将会在每次触发时调用handler，极像一条尾巴。

基本事件

通过事件实现异步协作是EventProxy的主要亮点。除此之外，它还是一个基本的事件库。携带如下基本API

- on/addListener，绑定事件监听器
- emit，触发事件
- once，绑定只执行一次的事件监听器
- removeListener，移除事件的监听器
- removeAllListeners，移除单个事件或者所有事件的监听器

更多API的描述请访问API Docs。

异常处理

在异步方法中，实际上，异常处理需要占用一定比例的精力。在过去一段时间内，我们都是通过额外添加error事件来进行处理的，代码大致如下：

    exports.getContent = function(callback){
        var ep = new EventProxy();
        ep.all('tpl','data',function(tpl,data){
            //sucessful
            callback(null,{
                template:tpl,
                data:data
            });
        });
        ep.bind('error',function(err){
            ep.unbind();
            callback(err);
        });
        fs.readFile('template.tpl','utf-8',function(err,content){
            if(err){
                return ep.emit('error',err);
            }
            ep.emit('tpl',content);
        });
        db.get('some sql',function(err,result){
            if(err){
                return ep.emit('error',err);
            }
            ep.emit('data',result);
        });
    };

上述代码过于复杂。因为要处理异常，以下是eventproxy的最佳实践错误处理方案。

    exports.getContent = function(callback){
        var ep = new EventProxy();
        ep.all('tpl','data',function(tpl,data){
            callback(null,{
                template:tpl,
                data:data
            });
        });
        ep.fail(callback);
        fs.readFile('template.tpl','utf-8',ep.done('tpl'));
        db.get('some sql',ep.done('data'));
    };

上述代码优化之后，业务开发者几乎不用关心异常处理了。代码量降低效果明显。 这里代码的转换，也许有开发者并不放心。其实秘诀在fail方法和done方法中。

    ep.fail(callback);
    // 由于参数位相同，它实际是
    ep.fail(function (err) {
      callback(err);
    });
    
    // 等价于
    ep.bind('error', function (err) {
      // 卸载掉所有handler
      ep.unbind();
      // 异常回调
      callback(err);
    });

fail方法侦听了error事件，默认处理卸载掉所有handler，并调用回调函数。

神奇的 throw

throw 是 ep.emit('error', err) 的简写。

    var err = new Error();
    ep.throw(err);
    // 实际是
    ep.emit('error', err);

神奇的done

    ep.done('tpl');
    // 等价于
    function (err, content) {
      if (err) {
        // 一旦发生异常，一律交给error事件的handler处理
        return ep.emit('error', err);
      }
      ep.emit('tpl', content);
    }

在Node的最佳实践中，回调函数第一个参数一定会是一个error对象。检测到异常后，将会触发error事件。剩下的参数，将触发事件，传递给对应handler处理。done也接受回调函数

done方法除了接受事件名外，还接受回调函数。如果是函数时，它将剔除第一个error对象(此时为null)后剩余的参数，传递给该回调函数作为参数。该回调函数无需考虑异常处理。

    ep.done(function (content) {
      // 这里无需考虑异常
      // 手工emit
      ep.emit('someevent', newcontent);
    });

当然手工emit的方式并不太好，我们更进一步的版本：

    ep.done('tpl', function (tpl) {
      // 将内容更改后，返回即可
      return tpl.trim();
    });

注意事项

如果emit需要传递多个参数时，ep.done(event, fn)的方式不能满足需求，还是需要ep.done(fn)，进行手工emit多个参数。神奇的group

fail除了用于协助all方法完成外，也能协助after中的异常处理。另外，在after的回调函数中，结果顺序是与用户emit的顺序有关。为了满足返回数据按发起异步调用的顺序排列，EventProxy提供了group方法。

    var ep = new EventProxy();
    ep.after('got_file', files.length, function (list) {
      // 在所有文件的异步执行结束后将被执行
      // 所有文件的内容都存在list数组中，按顺序排列
    });
    for (var i = 0; i < files.length; i++) {
      fs.readFile(files[i], 'utf-8', ep.group('got_file'));
    }

group秉承done函数的设计，它包含异常的传递。同时它还隐含了对返回数据进行编号，在结束时，按顺序返回。

    ep.group('got_file');
    // 约等价于
    function (err, data) {
      if (err) {
        return ep.emit('error', err);
      }
      ep.emit('got_file', data);
    };

当回调函数的数据还需要进行加工时，可以给group带上回调函数，只要在操作后将数据返回即可：

    ep.group('got_file', function (data) {
      // some code
      return data;
    });

异步事件触发: emitLater && doneLater

在node中，emit方法是同步的，EventProxy中的emit，trigger等跟node的风格一致，也是同步的。看下面这段代码，可能眼尖的同学一下就发现了隐藏的bug:

    var ep = EventProxy.create();
    
    db.check('key', function (err, permission) {
      if (err) {
        return ep.emit('error', err);
      }
      ep.emit('check', permission);
    });
    
    ep.once('check', function (permission) {
      permission && db.get('key', function (err, data) {
        if (err) {
          return ep.emit('error');
        }
        ep.emit('get', data);
      });
    });
    
    ep.once('get', function (err, data) {
      if (err) {
        return ep.emit('error', err);
      }
      render(data);
    });
    
    ep.on('error', errorHandler);

没错，万一db.check的callback被同步执行了，在ep监听check事件之前，它就已经被抛出来了，后续逻辑没办法继续执行。尽管node的约定是所有的callback都是需要异步返回的，但是如果这个方法是由第三方提供的，我们没有办法保证db.check的callback一定会异步执行，所以我们的代码通常就变成了这样:

    var ep = EventProxy.create();
    
    ep.once('check', function (permission) {
      permission && db.get('key', function (err, data) {
        if (err) {
          return ep.emit('error');
        }
        ep.emit('get', data);
      });
    });
    
    ep.once('get', function (err, data) {
      if (err) {
        return ep.emit('error', err);
      }
      render(data);
    });
    
    ep.on('error', errorHandler);
    
    db.check('key', function (err, permission) {
      if (err) {
        return ep.emit('error', err);
      }
      ep.emit('check', permission);
    });

我们被迫把db.check挪到最后，保证事件先被监听，再执行db.check。check->get->render的逻辑，在代码中看起来变成了get->render->check。如果整个逻辑更加复杂，这种风格将会让代码很难读懂。

这时候，我们需要的就是 异步事件触发：

    var ep = EventProxy.create();
    
    db.check('key', function (err, permission) {
      if (err) {
        return ep.emitLater('error', err);
      }
      ep.emitLater('check', permission);
    });
    
    ep.once('check', function (permission) {
      permission && db.get('key', function (err, data) {
        if (err) {
          return ep.emit('error');
        }
        ep.emit('get', data);
      });
    });
    
    ep.once('get', function (err, data) {
      if (err) {
        return ep.emit('error', err);
      }
      render(data);
    });
    
    ep.on('error', errorHandler);

上面代码中，我们把db.check的回调函数中的事件通过emitLater触发，这样,就算db.check的回调函数被同步执行了，事件的触发也还是异步的，ep在当前事件循环中监听了所有的事件，之后的事件循环中才会去触发check事件。代码顺序将和逻辑顺序保持一致。 当然，这么复杂的代码，必须可以像ep.done()一样通过doneLater来解决：

    var ep = EventProxy.create();
    
    db.check('key', ep.doneLater('check'));
    
    ep.once('check', function (permission) {
      permission && db.get('key', ep.done('get'));
    });
    
    ep.once('get', function (data) {
      render(data);
    });
    
    ep.fail(errorHandler);

最终呈现出来的，是一段简洁且清晰的代码。













极限丢人部分 啥是handlers啊

直接的翻译就是：事件处理程序

理解：事件发生，就会有一段JavaScript代码被执行。

    基本语法:
    事件名 = "javascript代码"
    <a href="http://google.com" onClick="alert('welcome to Google')">Google</a>123

有人说 event handlers 就是一段JavaScript代码, 

严格意义上来说，我并不这么认为， 

我认为event handlers包括JavaScript代码，但不只是JavaScript代码 

event handlers 类似于HTML元素的属性 ，JavaScript代码只是这个属性的值

- “属性” ：event 如：onclick
- “值”：handlers 即处理事件的相应的JavaScript代码
